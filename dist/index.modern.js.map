{"version":3,"file":"index.modern.js","sources":["../src/actions/device.ts","../src/actions/sipSessions.ts","../src/actions/sipAccounts.ts","../src/actions/config.ts","../src/util/hold.ts","../src/util/audio.ts","../src/util/TonePlayer.ts","../src/util/ToneManager.ts","../src/util/sessions.ts","../src/util/incomingSession.ts","../src/lib/SipAccount.ts","../src/SipWrapper.tsx","../src/reducers/sipSessions.ts","../src/reducers/sipAccounts.ts","../src/reducers/device.ts","../src/reducers/config.ts","../src/reducers/index.ts","../src/store/configureStore.ts","../src/index.tsx"],"sourcesContent":["import { Dispatch } from 'redux'\n\nexport const AUDIO_INPUT_DEVICES_DETECTED = 'AUDIO_INPUT_DEVICES_DETECTED'\nexport const AUDIO_OUTPUT_DEVICES_DETECTED = 'AUDIO_OUTPUT_DEVICES_DETECTED'\n\nexport const REMOTE_AUDIO_CONNECTED = 'REMOTE_AUDIO_CONNECTED'\nexport const REMOTE_AUDIO_FAIL = 'REMOTE_AUDIO_FAIL'\n\nexport const LOCAL_AUDIO_CONNECTED = 'LOCAL_AUDIO_CONNECTED'\nexport const LOCAL_AUDIO_FAIL = 'REMOTE_AUDIO_FAIL'\n\nexport const SET_PRIMARY_OUTPUT = 'SET_PRIMARY_OUTPUT'\nexport const SET_PRIMARY_INPUT = 'SET_PRIMARY_INPUT'\n\nexport const SET_LOCAL_AUDIO_SESSIONS_PENDING = 'SET_LOCAL_AUDIO_SESSIONS_PENDING'\nexport const SET_LOCAL_AUDIO_SESSION_SUCCESS = 'SET_LOCAL_AUDIO_SESSION_SUCCESS'\nexport const SET_LOCAL_AUDIO_SESSION_FAIL = 'SET_LOCAL_AUDIO_SESSION_FAIL'\n\nexport const SET_REMOTE_AUDIO_SESSIONS_PENDING = 'SET_REMOTE_AUDIO_SESSIONS_PENDING'\nexport const SET_REMOTE_AUDIO_SESSION_SUCCESS = 'SET_REMOTE_AUDIO_SESSION_SUCCESS'\nexport const SET_REMOTE_AUDIO_SESSION_FAIL = 'SET_REMOTE_AUDIO_SESSION_FAIL'\n\nexport const AUDIO_SINKID_NOT_ALLOWED = 'AUDIO_SINKID_NOT_ALLOWED'\n\nexport const getInputAudioDevices = () => {\n  const inputArray: Array<Object> = []\n  navigator.mediaDevices\n    .enumerateDevices()\n    .then(function (devices: Array<Object>) {\n      devices.forEach(function (device: any) {\n        if (device.kind === 'audioinput') {\n          inputArray.push(device)\n        }\n      })\n    })\n  return {\n    type: AUDIO_INPUT_DEVICES_DETECTED,\n    payload: inputArray\n  }\n}\n\nexport const getOutputAudioDevices = () => {\n  const outputArray: Array<Object> = []\n  navigator.mediaDevices\n    .enumerateDevices()\n    .then(function (devices: Array<Object>) {\n      devices.forEach(function (device: any) {\n        if (device.kind === 'audiooutput') {\n          outputArray.push(device)\n        }\n      })\n    })\n  return {\n    type: AUDIO_OUTPUT_DEVICES_DETECTED,\n    payload: outputArray\n  }\n}\n\nexport const setPrimaryOutput = (deviceId: string, sessions: any) => (\n  dispatch: Dispatch\n) => {\n  if (sessions) {\n    if (Object.keys(sessions).length > 0) {\n      dispatch({\n        type: SET_REMOTE_AUDIO_SESSIONS_PENDING\n      })\n      for (const [sessionId, _session] of Object.entries(sessions)) {\n        // @ts-ignore\n        if (_session.state === 'Established') {\n          try {\n            const mediaElement = document.getElementById(sessionId)\n            const remoteStream = new MediaStream()\n            // @ts-ignore\n            _session.sessionDescriptionHandler.peerConnection\n              // check if session is established?\n              .getReceivers()\n              .forEach((receiver: any) => {\n                if (receiver.track) {\n                  remoteStream.addTrack(receiver.track)\n                }\n              })\n            if (mediaElement) {\n              // @ts-ignore\n              mediaElement.setSinkId(deviceId).then(() => {\n                // @ts-ignore\n                mediaElement.srcObject = remoteStream\n                // @ts-ignore\n                mediaElement.play()\n              })\n            } else {\n              console.log('no media Element')\n            }\n          } catch (err) {\n            console.log(err)\n            dispatch({\n              type: SET_REMOTE_AUDIO_SESSION_FAIL\n            })\n            return\n          }\n        }\n        dispatch({\n          type: SET_REMOTE_AUDIO_SESSION_SUCCESS\n        })\n      }\n    }\n  }\n  dispatch({\n    type: SET_PRIMARY_OUTPUT,\n    payload: deviceId\n  })\n}\n\nexport const setPrimaryInput = (\n  deviceId: string,\n  sessions: any,\n  sinkIdAllowed: boolean\n) => (dispatch: Dispatch) => {\n  if (sessions) {\n    if (Object.keys(sessions).length > 0) {\n      dispatch({\n        type: SET_LOCAL_AUDIO_SESSIONS_PENDING\n      })\n      for (const [sessionId, _session] of Object.entries(sessions)) {\n        // @ts-ignore\n        if (_session.state === 'Established') {\n          try {\n            // @ts-ignore\n            _session.sessionDescriptionHandler.peerConnection\n              .getSenders()\n              .forEach(function (sender: any) {\n                console.log(sessionId)\n                if (sender.track && sender.track.kind === 'audio') {\n                  const audioDeviceId = deviceId\n                  navigator.mediaDevices\n                    // @ts-ignore\n\n                    // creates a stream w track\n                    .getUserMedia({ audio: { deviceId: audioDeviceId } })\n                    .then(function (stream) {\n                      const audioTrack = stream.getAudioTracks()\n                      sender.replaceTrack(audioTrack[0])\n                    })\n                }\n              })\n          } catch (err) {\n            console.log(err)\n            dispatch({\n              type: SET_LOCAL_AUDIO_SESSION_FAIL\n            })\n            return\n          }\n        }\n        dispatch({\n          type: SET_LOCAL_AUDIO_SESSION_SUCCESS\n        })\n      }\n    }\n  }\n  dispatch({\n    type: SET_PRIMARY_INPUT,\n    payload: deviceId\n  })\n\n  // change remote audio for safari sessions\n  if (sinkIdAllowed === false) {\n    if (sessions) {\n      if (Object.keys(sessions).length > 0) {\n        for (const [sessionId, _session] of Object.entries(sessions)) {\n          // @ts-ignore\n          if (_session.state === 'Established') {\n            try {\n              const mediaElement = document.getElementById(sessionId)\n              const remoteStream = new MediaStream()\n              // @ts-ignore\n              _session.sessionDescriptionHandler.peerConnection\n                .getReceivers()\n                .forEach((receiver: any) => {\n                  if (receiver.track) {\n                    remoteStream.addTrack(receiver.track)\n                  }\n                })\n              if (mediaElement) {\n                // @ts-ignore\n                mediaElement.srcObject = remoteStream\n                // @ts-ignore\n                mediaElement.play()\n              } else {\n                console.log('no media Element')\n              }\n            } catch (err) {\n              console.log(err)\n              dispatch({\n                type: SET_REMOTE_AUDIO_SESSION_FAIL\n              })\n              return\n            }\n          }\n          dispatch({\n            type: SET_REMOTE_AUDIO_SESSION_SUCCESS\n          })\n        }\n      }\n    }\n  }\n}\n\nexport const sinkIdAllowed = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: AUDIO_SINKID_NOT_ALLOWED\n  })\n}\n","import { Session, SessionState } from 'sip.js'\nimport { Dispatch } from 'redux'\n\nexport const NEW_SESSION = 'NEW_SESSION'\nexport const NEW_ATTENDED_TRANSFER = 'NEW_ATTENDED_TRANSFER'\nexport const INCOMING_CALL = 'INCOMING_CALL'\n\nexport const ACCEPT_CALL = 'ACCEPT_CALL'\nexport const DECLINE_CALL = 'DECLINE_CALL'\n\nexport const SIPSESSION_STATECHANGE = 'SIPSESSION_STATECHANGE'\nexport const CLOSE_SESSION = 'CLOSE_SESSION'\n\nexport const SIPSESSION_MAKECALL_REQUEST = 'SIPSESSION_MAKECALL_REQUEST'\nexport const SIPSESSION_MAKECALL_SUCCESS = 'SIPSESSION_MAKECALL_SUCCESS'\nexport const SIPSESSION_MAKECALL_FAIL = 'SIPSESSION_MAKECALL_FAIL'\n\nexport const SIPSESSION_HOLD_REQUEST = 'SIPSESSION_HOLD_REQUEST'\nexport const SIPSESSION_HOLD_SUCCESS = 'SIPSESSION_HOLD_SUCCESS'\nexport const SIPSESSION_HOLD_FAIL = 'SIPSESSION_HOLD_FAIL'\nexport const SIPSESSION_UNHOLD_REQUEST = 'SIPSESSION_UNHOLD_REQUEST'\nexport const SIPSESSION_UNHOLD_SUCCESS = 'SIPSESSION_UNHOLD_SUCCESS'\nexport const SIPSESSION_UNHOLD_FAIL = 'SIPSESSION_UNHOLD_FAIL'\n\nexport const SIPSESSION_MUTE_REQUEST = 'SIPSESSION_MUTE_REQUEST'\nexport const SIPSESSION_MUTE_SUCCESS = 'SIPSESSION_MUTE_SUCCESS'\nexport const SIPSESSION_MUTE_FAIL = 'SIPSESSION_MUTE_FAIL'\nexport const SIPSESSION_UNMUTE_REQUEST = 'SIPSESSION_UNMUTE_REQUEST'\nexport const SIPSESSION_UNMUTE_SUCCESS = 'SIPSESSION_UNMUTE_SUCCESS'\nexport const SIPSESSION_UNMUTE_FAIL = 'SIPSESSION_UNMUTE_FAIL'\n\nexport const SIPSESSION_BLIND_TRANSFER_REQUEST =\n  'SIPSESSION_BLIND_TRANSFER_REQUEST'\nexport const SIPSESSION_BLIND_TRANSFER_SUCCESS =\n  'SIPSESSION_BLIND_TRANSFER_SUCCESS'\nexport const SIPSESSION_BLIND_TRANSFER_FAIL = 'SIPSESSION_BLIND_TRANSFER_FAIL'\n\nexport const SIPSESSION_ATTENDED_TRANSFER_REQUEST =\n  'SIPSESSION_ATTENDED_TRANSFER_REQUEST'\nexport const SIPSESSION_ATTENDED_TRANSFER_PENDING =\n  'SIPSESSION_ATTENDED_TRANSFER_PENDING'\nexport const SIPSESSION_ATTENDED_TRANSFER_READY =\n  'SIPSESSION_ATTENDED_TRANSFER_READY'\nexport const SIPSESSION_ATTENDED_TRANSFER_CANCEL =\n  'SIPSESSION_ATTENDED_TRANSFER_CANCEL'\nexport const SIPSESSION_ATTENDED_TRANSFER_FAIL =\n  'SIPSESSION_ATTENDED_TRANSFER_FAIL'\nexport const SIPSESSION_ATTENDED_TRANSFER_SUCCESS =\n  'SIPSESSION_ATTENDED_TRANSFER_SUCCESS'\n\nexport const stateChange = (newState: SessionState, id: string) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: SIPSESSION_STATECHANGE,\n    payload: { state: newState, id }\n  })\n}\n\nexport const closeSession = (id: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: CLOSE_SESSION,\n    payload: id\n  })\n}\n\nexport const acceptCall = (session: Session) => {\n  return { type: ACCEPT_CALL, payload: session }\n}\n\nexport const declineCall = (session: Session) => {\n  return { type: DECLINE_CALL, payload: session }\n}\n\nexport const endCall = (sessionId: string) => {\n  return { type: CLOSE_SESSION, payload: sessionId }\n}\n\nexport const holdCallRequest = (session: Session) => (dispatch: Dispatch) => {\n  if (!session.sessionDescriptionHandler || session.state !== SessionState.Established) {\n    return { type: SIPSESSION_HOLD_FAIL }\n  }\n  try {\n    session.invite({\n      sessionDescriptionHandlerModifiers: [\n        session.sessionDescriptionHandler!.holdModifier\n      ]\n    })\n    dispatch({ type: SIPSESSION_HOLD_REQUEST, payload: session.id })\n  } catch (err) {\n    dispatch({ type: SIPSESSION_HOLD_FAIL })\n  }\n  return\n}\n\n// maps thru onHold and sessions arrays looking for a call to put on hold before unHolding a call\nexport const unHoldCallRequest = (\n  session: Session,\n  onHolds: Array<any>,\n  sessions: Array<any>\n) => (dispatch: Dispatch) => {\n  // checks for  established sessions that are not on hold\n  for (const [sessionId, _session] of Object.entries(sessions)) {\n    if (onHolds.indexOf(sessionId) < 0 && sessionId !== session.id && _session.state === 'Established') {\n      // hold session if not on hold\n      try {\n        _session.invite({\n          sessionDescriptionHandlerModifiers: [\n            _session.sessionDescriptionHandler!.holdModifier\n          ]\n        })\n        dispatch({ type: SIPSESSION_HOLD_REQUEST, payload: _session.id })\n      } catch (err) {\n        dispatch({ type: SIPSESSION_HOLD_FAIL })\n      }\n    }\n  }\n  // unhold original session\n  try {\n    session.invite()\n    dispatch({ type: SIPSESSION_UNHOLD_REQUEST, payload: session.id })\n  } catch (err) {\n    dispatch({ type: SIPSESSION_UNHOLD_FAIL })\n  }\n}\n\nexport const blindTransferRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_REQUEST\n  })\n}\n\nexport const blindTransferSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_SUCCESS\n  })\n}\n\nexport const blindTransferFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_FAIL\n  })\n}\n\nexport const attendedTransferRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_REQUEST,\n  })\n}\n\nexport const attendedTransferCancel = (session: Session) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_CANCEL,\n    payload: session\n\n  })\n}\n\nexport const attendedTransferReady = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_READY\n  })\n}\n\nexport const attendedTransferPending = (session: Session) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_PENDING,\n    payload: session\n  })\n}\n\nexport const attendedTransferSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_SUCCESS\n  })\n}\nexport const attendedTransferFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_FAIL,\n  })\n}\n\nexport const muteRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_REQUEST\n  })\n}\n\nexport const muteSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_SUCCESS\n  })\n}\n\nexport const muteFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_FAIL\n  })\n}\n\nexport const unMuteRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_REQUEST\n  })\n}\n\nexport const unMuteSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_SUCCESS\n  })\n}\n\nexport const unMuteFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_FAIL\n  })\n}\n","// eslint-disable-next-line no-unused-vars\nimport SIPAccount from '../lib/SipAccount'\n\nexport const SIPACCOUNT_UNREGISTERED = 'SIPACCOUNT_UNREGISTERED'\nexport const NEW_USERAGENT = 'NEW_USERAGENT'\nexport const NEW_ACCOUNT = 'NEW_ACCOUNT'\n\nexport const setNewAccount = (account: SIPAccount) => {\n  return { type: NEW_ACCOUNT, payload: account }\n}","// eslint-disable-next-line no-unused-vars\nimport { PhoneConfig, AppConfig } from '../models'\n\nexport const SET_CREDENTIALS = 'SET_CREDENTIALS'\nexport const SET_PHONE_CONFIG = 'SET_PHONE_CONFIG'\nexport const SET_APP_CONFIG = 'SET_APP_CONFIG'\nexport const STRICT_MODE_SHOW_CALL_BUTTON = 'STRICT_MODE_SHOW_CALL_BUTTON'\nexport const STRICT_MODE_HIDE_CALL_BUTTON = 'STRICT_MODE_HIDE_CALL_BUTTON'\nexport const ATTENDED_TRANSFER_LIMIT_REACHED = 'ATTENDED_TRANSFER_LIMIT_REACHED'\nexport const SESSIONS_LIMIT_REACHED = 'SESSIONS_LIMIT_REACHED'\n\nexport const setCredentials = (uri: string = '', password: string = '') => {\n  return { type: SET_CREDENTIALS, payload: { uri, password } }\n}\n\nexport const setPhoneConfig = (config: PhoneConfig) => {\n  return { type: SET_PHONE_CONFIG, payload: config }\n}\n\nexport const setAppConfig = (config: AppConfig) => {\n  return { type: SET_APP_CONFIG, payload: config }\n}\n\nexport const setAppConfigStarted = () => {\n  return { type: STRICT_MODE_SHOW_CALL_BUTTON }\n}\n\nexport const setAppConfigCallEnded = () => {\n  return { type: STRICT_MODE_HIDE_CALL_BUTTON }\n}\n\nexport const attendedTransferLimitReached = () => {\n  return { type: ATTENDED_TRANSFER_LIMIT_REACHED }\n}\n\nexport const sessionsLimitReached = () => {\n  return { type: SESSIONS_LIMIT_REACHED }\n}\n","import { phoneStore } from '../index'\nimport {\n  SIPSESSION_HOLD_REQUEST,\n  holdCallRequest\n} from '../actions/sipSessions'\n\nexport const holdAll = (id: string) => {\n  const state = phoneStore.getState()\n  // @ts-ignore\n  const onHolds = state.sipSessions.onHold\n  // @ts-ignore\n  const sessions = state.sipSessions.sessions\n  for (const [sessionId, session] of Object.entries(sessions)) {\n    if (onHolds.indexOf(sessionId) < 0 && sessionId !== id) {\n      try {\n        // @ts-ignore\n        holdCallRequest(session)\n        // dispatch here because class is not connected to redux actions\n        phoneStore.dispatch({\n          type: SIPSESSION_HOLD_REQUEST,\n          // @ts-ignore\n          payload: session.id\n        })\n        return\n      } catch (err) {\n        return\n      }\n    }\n  }\n}\n\n\n","import { phoneStore } from '../index'\nimport { Session } from 'sip.js'\n\nimport {\n  REMOTE_AUDIO_CONNECTED,\n  REMOTE_AUDIO_FAIL,\n  LOCAL_AUDIO_CONNECTED,\n  AUDIO_SINKID_NOT_ALLOWED\n} from '../actions/device'\n\n// adds track from getReceiver stream to <audio id={sessionId}> in Phone.tsx\nexport const setRemoteAudio = (session: Session) => {\n  console.log('setRemoteAudio')\n  const state = phoneStore.getState()\n  // @ts-ignore\n  const deviceId = state.device.primaryAudioOutput\n  const mediaElement = document.getElementById(session.id)\n  const remoteStream = new MediaStream()\n  // @ts-ignore\n  session.sessionDescriptionHandler.peerConnection\n    .getReceivers()\n    .forEach((receiver: any) => {\n      if (receiver.track.kind === 'audio') {\n        remoteStream.addTrack(receiver.track)\n      }\n    })\n\n  // checks for browser compatibility\n  // @ts-ignore\n  if (mediaElement && typeof mediaElement.sinkId === 'undefined') {\n    console.log('safari')\n    phoneStore.dispatch({\n      type: AUDIO_SINKID_NOT_ALLOWED\n    })\n    // @ts-ignore\n    mediaElement.srcObject = remoteStream\n    // @ts-ignore\n    mediaElement.play()\n\n    // @ts-ignore\n  } else if (mediaElement && typeof mediaElement.sinkId !== 'undefined') {\n    // @ts-ignore\n    mediaElement.setSinkId(deviceId).then(() => {\n      // @ts-ignore\n      mediaElement.srcObject = remoteStream\n      // @ts-ignore\n      mediaElement.play()\n    })\n  } else {\n    phoneStore.dispatch({\n      type: REMOTE_AUDIO_FAIL\n    })\n  }\n  phoneStore.dispatch({\n    type: REMOTE_AUDIO_CONNECTED\n  })\n}\n\n// creates new audio track then replaces audio track in getSender stream w/ new track\nexport const setLocalAudio = (session: Session) => {\n  const state = phoneStore.getState()\n  // @ts-ignore\n  const deviceId = state.device.primaryAudioInput\n  // @ts-ignore\n  session.sessionDescriptionHandler.peerConnection\n    .getSenders()\n    .forEach(function (sender: any) {\n      if (sender.track && sender.track.kind === 'audio') {\n        const audioDeviceId = deviceId\n        navigator.mediaDevices\n          .getUserMedia({ audio: { deviceId: audioDeviceId } })\n          .then(function (stream) {\n            const audioTrack = stream.getAudioTracks()\n            if (audioTrack) {\n              sender.replaceTrack(audioTrack[0])\n            }\n          })\n      }\n    })\n  phoneStore.dispatch({\n    type: LOCAL_AUDIO_CONNECTED\n  })\n}\n\nexport const cleanupMedia = (sessionId: string) => {\n  const mediaElement = document.getElementById(sessionId)\n  if (mediaElement) {\n    // @ts-ignore\n    mediaElement.srcObject = null\n    // @ts-ignore\n    mediaElement.pause()\n  }\n}\n","const Tone = require('tone');\n\nconst DTMF_MATRIX = {\n  1: [697, 1209],\n  2: [697, 1336],\n  3: [697, 1477],\n  A: [697, 1633],\n  4: [770, 1209],\n  5: [770, 1336],\n  6: [770, 1477],\n  B: [770, 1633],\n  7: [852, 1209],\n  8: [852, 1336],\n  9: [852, 1477],\n  C: [852, 1633],\n  0: [941, 1209],\n  '*': [941, 1336],\n  '#': [941, 1477],\n  D: [941, 1633]\n}\n\nconst Synth = Tone.PolySynth && new Tone.PolySynth(2, Tone.Synth)\nconst FMSynth = Tone.PolySynth && new Tone.PolySynth(2, Tone.FMSynth)\n\nexport const playDTMF = (key: any, deviceId: string) => {\n  const obj = DTMF_MATRIX[key]\n  if (!obj) {\n    console.log('invalid DTMF tone input')\n  }\n  Synth.volume.value = -10\n  Synth.set({\n    oscillator: {\n      type: 'sine'\n    },\n    envelope: {\n      attack: 0.02,\n      decay: 0.1,\n      sustain: 0.2,\n      release: 0.02\n    }\n  })\n\n  if (deviceId !== 'default') {\n    const mediaElement = document.getElementById('tone')\n    if (mediaElement) {\n      const dest = Tone.context.createMediaStreamDestination()\n      Synth.connect(dest)\n      // @ts-ignore\n      mediaElement.setSinkId(deviceId).then(() => {\n        // @ts-ignore\n        mediaElement.srcObject = dest.stream\n        // @ts-ignore\n        mediaElement.play()\n      })\n    }\n  } else {\n    Synth.toMaster()\n  }\n\n  Synth.triggerAttackRelease(obj, 0.3)\n}\n\nexport const callDisconnect = (deviceId: string) => {\n  FMSynth.triggerAttack(['C4', 'E4'], '+0.1')\n  FMSynth.triggerRelease(['C4', 'E4'], '+0.14')\n  FMSynth.triggerAttack(['D4', 'G4'], '+0.14')\n  FMSynth.triggerRelease(['D4', 'G4'], '+0.18')\n  if (deviceId !== 'default') {\n    const mediaElement = document.getElementById('tone')\n\n    if (mediaElement) {\n      const dest = Tone.context.createMediaStreamDestination()\n      Synth.connect(dest)\n      // @ts-ignore\n      mediaElement.setSinkId(deviceId).then(() => {\n        // @ts-ignore\n        mediaElement.srcObject = dest.stream\n        // @ts-ignore\n        mediaElement.play()\n      })\n    }\n  } else {\n    FMSynth.toMaster()\n  }\n}\n\nclass TonePlayer {\n  private loop: any\n\n  // get audio element, set srcObj to device, and play the track\n  ringtone = (deviceId: string) => {\n    const mediaElement = document.getElementById('ringtone')\n    if (deviceId !== 'default') {\n      if (mediaElement) {\n        // @ts-ignore\n        mediaElement.setSinkId(deviceId).then(() => {\n          // @ts-ignore\n          mediaElement.play()\n        })\n      } else {\n        console.log('no media Element')\n      }\n    } else {\n      // @ts-ignore\n      mediaElement.play()\n    }\n  }\n\n  ringback = (deviceId: string) => {\n    const dest = Tone.context.createMediaStreamDestination()\n    console.log(dest)\n    Synth.set({\n      oscillator: {\n        type: 'sine'\n      },\n      envelope: {\n        attack: 0.02,\n        decay: 0.1,\n        sustain: 0.2,\n        release: 0.02\n      }\n    }).connect(dest)\n    if (deviceId !== 'default') {\n      const mediaElement = document.getElementById('tone')\n      if (mediaElement) {\n        const dest = Tone.context.createMediaStreamDestination()\n        Synth.connect(dest)\n        // @ts-ignore\n        mediaElement.setSinkId(deviceId).then(() => {\n          // @ts-ignore\n          mediaElement.srcObject = dest.stream\n          // @ts-ignore\n          mediaElement.play()\n        })\n      }\n    } else {\n      Synth.toMaster()\n    }\n\n    this.loop = new Tone.Loop((time: any) => {\n      Synth.triggerAttack([440, 480])\n      Synth.triggerRelease([440, 480], time + 2)\n    }, 6)\n    this.loop.start(0)\n    Tone.Transport.start()\n  }\n\n  stop() {\n    if (this.loop) {\n      try {\n        this.loop.stop(0)\n      } catch {\n        console.log('no loop to stop')\n      }\n    }\n\n    if (Tone.Transport) {\n      try {\n        Tone.Transport.stop()\n        Synth.triggerRelease([440, 480])\n      } catch {\n        console.log('no tone to stop')\n      }\n    }\n\n    const mediaElement = document.getElementById('ringtone')\n    if (mediaElement) {\n      // @ts-ignore\n      const promise = mediaElement.pause()\n      if (promise !== undefined) {\n        promise\n          .catch((error: any) => {\n            console.log(error)\n          })\n          .then(() => {\n            console.log('ringtone stopped')\n          })\n      }\n    }\n  }\n}\n\nexport default TonePlayer\n","import TonePlayer from './TonePlayer'\nimport { phoneStore } from '../index'\n\nclass ToneManager {\n  currentTone: any\n\n  playRing(type: string) {\n    return\n    const state = phoneStore.getState()\n    // @ts-ignore\n    const deviceId = state.device.primaryAudioOutput\n    if (this.currentTone) {\n      this.currentTone.stop()\n      this.currentTone = undefined\n    }\n    if (type === 'ringback') {\n      this.currentTone = new TonePlayer()\n      this.currentTone.ringback(deviceId)\n    } else if (type == 'ringtone') {\n      this.currentTone = new TonePlayer()\n      this.currentTone.ringtone(deviceId)\n    }\n  }\n\n  stopAll() {\n    return\n    if (this.currentTone) {\n      this.currentTone.stop()\n      this.currentTone = undefined\n    }\n  }\n}\n\nconst toneManager = new ToneManager()\nexport default toneManager\n","import { phoneStore } from '../index'\nimport { SessionState, Session, UserAgent} from 'sip.js'\nimport { Transport as WebTransport } from \"sip.js/lib/platform/web/transport\";\nimport { SIPSESSION_STATECHANGE, CLOSE_SESSION } from '../actions/sipSessions'\nimport { STRICT_MODE_SHOW_CALL_BUTTON } from '../actions/config'\nimport { holdAll } from '../util/hold'\nimport { setLocalAudio, setRemoteAudio, cleanupMedia } from './audio'\nimport toneManager from './ToneManager'\n\nexport class SessionStateHandler {\n  private session: Session\n  private ua: UserAgent\n  constructor(session: Session, ua: UserAgent) {\n    this.session = session\n    this.ua = ua\n  }\n\n  public stateChange = (newState: SessionState) => {\n    switch (newState) {\n      case SessionState.Establishing:\n        holdAll(this.session.id)\n        toneManager.playRing('ringback')\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n\n        // check if session recieves a BYE message while sessionstate is establishing\n        const myTransport = this.ua.transport as WebTransport\n        myTransport.on('message', (message: string) => {\n          if (message.includes('BYE ') && message.indexOf('BYE ') === 0) {\n            if (this.session.state === 'Establishing') {\n              console.log(\n                `${message} session has recieved a BYE message when the session state is establishing`\n              )\n              // @ts-ignore\n              this.session.cancel()\n              this.session.dispose()\n              setTimeout(() => {\n                phoneStore.dispatch({\n                  type: CLOSE_SESSION,\n                  payload: this.session.id\n                })\n                toneManager.stopAll()\n                phoneStore.dispatch({\n                  type: STRICT_MODE_SHOW_CALL_BUTTON\n                })\n              }, 5000)\n              return\n            } else {\n              return\n            }\n          }\n        })\n        break\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        toneManager.stopAll()\n        setLocalAudio(this.session)\n        setRemoteAudio(this.session)\n        break\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        toneManager.stopAll()\n        cleanupMedia(this.session.id)\n        break\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        setTimeout(() => {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: this.session.id\n          })\n          toneManager.stopAll()\n          phoneStore.dispatch({\n            type: STRICT_MODE_SHOW_CALL_BUTTON\n          })\n        }, 5000)\n        break\n      default:\n        console.log(`Unknown session state change: ${newState}`)\n        break\n    }\n  }\n}\n\nexport const getFullNumber = (number: string) => {\n  if (number.length < 10) {\n    return number\n  }\n  // @ts-ignore\n  let fullNumber = `+${phoneStore.getState().sipAccounts.sipAccount._config.defaultCountryCode}${number}`\n  if (number.includes('+') && number.length === 10) {\n    fullNumber = `${number}`\n  }\n  console.log(fullNumber)\n  return fullNumber\n}\n\nexport const statusMask = (status: string) => {\n  switch (status) {\n    case 'Established':\n      return 'Connected'\n    case 'Establishing':\n      return 'Calling...'\n    case 'Initial':\n      return 'Initial'\n    case 'Terminating':\n    case 'Terminated':\n      return 'Ended'\n    default:\n      return 'Unknown Status'\n  }\n}\n\nexport const getDurationDisplay = (duration: number) => {\n  let minutes = Math.floor(duration / 60)\n  const hours = Math.floor(minutes / 60)\n  minutes = minutes % 60\n  const seconds = duration % 60\n  let dh, dm, ds\n  if (hours && hours < 10) {\n    dh = `0${hours}:`\n  } else if (hours) {\n    dh = `${hours}:`\n  } else {\n    dh = '00:'\n  }\n  if (minutes && minutes < 10) {\n    dm = `0${minutes}:`\n  } else if (minutes) {\n    dm = `${minutes}:`\n  } else {\n    dm = '00:'\n  }\n  if (seconds && seconds < 10) {\n    ds = `0${seconds}`\n  } else if (seconds) {\n    ds = `${seconds}`\n  } else {\n    ds = '00'\n  }\n  return `${hours ? dh : ''}${dm}${ds}`\n}\n","import { phoneStore } from '../index'\nimport { SessionState, Session } from 'sip.js'\nimport { SIPSESSION_STATECHANGE, CLOSE_SESSION } from '../actions/sipSessions'\nimport { holdAll } from '../util/hold'\nimport { setLocalAudio, setRemoteAudio, cleanupMedia } from './audio'\n\nexport class IncomingSessionStateHandler {\n  private incomingSession: Session\n  constructor(incomingSession: Session) {\n    this.incomingSession = incomingSession\n  }\n\n  public stateChange = (newState: SessionState) => {\n    switch (newState) {\n      case SessionState.Establishing:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        break\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        holdAll(this.incomingSession.id)\n        setLocalAudio(this.incomingSession)\n        setRemoteAudio(this.incomingSession)\n        break\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        cleanupMedia(this.incomingSession.id)\n        break\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        setTimeout(() => {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: this.incomingSession.id\n          })\n        }, 5000)\n        break\n      default:\n        console.log(`Unknown session state change: ${newState}`)\n        break\n    }\n  }\n}\n","import {\n  Inviter,\n  Invitation,\n  Referral,\n  Registerer,\n  RegistererState,\n  RegistererOptions,\n  Session,\n  UserAgent,\n  UserAgentOptions\n} from 'sip.js'\n\nimport { TransportOptions } from 'sip.js/lib/platform/web'\nimport { phoneStore } from '../index'\nimport { NEW_USERAGENT } from '../actions/sipAccounts'\nimport { SessionStateHandler, getFullNumber } from '../util/sessions'\nimport { IncomingSessionStateHandler } from '../util/incomingSession'\nimport { STRICT_MODE_HIDE_CALL_BUTTON, SESSIONS_LIMIT_REACHED } from '../actions/config'\nimport { NEW_SESSION, INCOMING_CALL } from '../actions/sipSessions'\nimport { SipConfig, SipCredentials } from '../models'\n\nexport default class SIPAccount {\n  public _config: SipConfig\n  public _credentials: SipCredentials\n  public _userAgent: any\n  public _registerer: any\n\n  constructor(sipConfig: SipConfig, sipCredentials: SipCredentials) {\n    this._config = sipConfig\n    this._credentials = sipCredentials\n    const uri = UserAgent.makeURI('sip:' + sipCredentials.sipuri)\n    if (!uri) {\n      throw new Error('Failed to create URI')\n    }\n    const transportOptions: TransportOptions = {\n      server: sipConfig.websocket\n    }\n    const userAgentOptions: UserAgentOptions = {\n      autoStart: false,\n      autoStop: true,\n      noAnswerTimeout: sipConfig.noAnswerTimeout || 30,\n      logBuiltinEnabled: process.env.NODE_ENV !== 'production',\n      logConfiguration: process.env.NODE_ENV !== 'production',\n      logLevel: process.env.NODE_ENV !== 'production' ? 'debug' : 'error',\n      authorizationPassword: sipCredentials.password,\n      userAgentString: 'OTF-react-sip-phone',\n      hackWssInTransport: true,\n      transportOptions,\n      uri,\n      sessionDescriptionHandlerFactoryOptions: {\n        constraints: {\n          audio: {\n            deviceId: 'default'\n          },\n          video: false\n        },\n        alwaysAcquireMediaFirst: true,\n        iceCheckingTimeout: 500\n      }\n    }\n    const registererOptions: RegistererOptions = {\n      expires: 300,\n      logConfiguration: process.env.NODE_ENV !== 'production'\n    }\n\n    // check here for register\n    this._userAgent = new UserAgent(userAgentOptions)\n    this._registerer = new Registerer(this._userAgent, registererOptions)\n    this.setupDelegate() // Delegate is what handles incoming calls\n    this._userAgent.start().then(() => {\n      this._registerer.register()\n      this.setupRegistererListener()\n      // Push ua to store\n      phoneStore.dispatch({ type: NEW_USERAGENT, payload: this._userAgent })\n    })\n  }\n\n\n  setupDelegate() {\n    this._userAgent.delegate = {\n      onInvite(invitation: Invitation): void {\n        // An Invitation is a Session\n        const incomingSession: Session = invitation\n\n        // Setup incoming session delegate\n        incomingSession.delegate = {\n          // Handle incoming REFER request.\n          onRefer(referral: Referral): void {\n            console.log(referral)\n          }\n        }\n\n        phoneStore.dispatch({ type: INCOMING_CALL, payload: incomingSession })\n\n        const stateHandler = new IncomingSessionStateHandler(incomingSession)\n        // Handle incoming session state changes.\n        incomingSession.stateChange.addListener(stateHandler.stateChange)\n      }\n    }\n  }\n\n  setupRegistererListener() {\n    this._registerer.stateChange.addListener((newState: RegistererState) => {\n      switch (newState) {\n        case RegistererState.Initial:\n          console.log('The user registration has initialized  ')\n          break\n        case RegistererState.Registered:\n          console.log('The user is registered ')\n          break\n        case RegistererState.Unregistered:\n          console.log('The user is unregistered ')\n          break\n        case RegistererState.Terminated:\n          console.log('The user is terminated ')\n          break\n      }\n    })\n  }\n\n  makeCall(number: string) {\n    const state = phoneStore.getState()\n    // @ts-ignore\n    const sessionsLimit: number = state.config.phoneConfig.sessionsLimit\n    // @ts-ignore\n    const sessionsActiveObject: Object = state.sipSessions.sessions\n    // @ts-ignore\n    const strictMode: string = state.config.appConfig.mode\n    // @ts-ignore\n    const attendedTransfersActive: number = state.sipSessions.attendedTransfers.length\n\n    // added sessionsLimit check if outside Application makes call using sipaccount w/o using dialstring\n    const sessionsActive: number = Object.keys(sessionsActiveObject).length\n    const sessionDiff: number = sessionsActive - attendedTransfersActive\n    if (sessionDiff >= sessionsLimit){\n      phoneStore.dispatch({ type: SESSIONS_LIMIT_REACHED })\n    } else {\n      // Make a call\n      const target = UserAgent.makeURI(\n        `sip:${getFullNumber(number)}@${this._credentials.sipuri.split('@')[1]};user=phone`\n      )\n      // strict mode will remove dialstring call button on session initialization\n      if (strictMode === ('strict')) {\n        phoneStore.dispatch({ type: STRICT_MODE_HIDE_CALL_BUTTON })\n      }\n\n      if (target) {\n        console.log(`Calling ${number}`)\n        const inviter = new Inviter(this._userAgent, target)\n        // An Inviter is a Session\n        const outgoingSession: Session = inviter\n        // Setup outgoing session delegate\n        outgoingSession.delegate = {\n          // Handle incoming REFER request.\n          onRefer(referral: Referral): void {\n            // TODO\n            console.log('Referred: ' + referral)\n          }\n        }\n        phoneStore.dispatch({ type: NEW_SESSION, payload: outgoingSession })\n        // Handle outgoing session state changes.\n        const stateHandler = new SessionStateHandler(\n          outgoingSession,\n          this._userAgent\n        )\n        outgoingSession.stateChange.addListener(stateHandler.stateChange)\n        outgoingSession\n          .invite()\n          .then(() => {\n            console.log('Invite sent!')\n          })\n          .catch((error: Error) => {\n            console.log(error)\n          })\n      } else {\n        console.log(`Failed to establish outgoing call session to ${number}`)\n      }\n    }\n\n    // toneManager.playRing('ringback')\n  }\n\n  listener() {}\n}\n","import * as React from 'react'\nimport { SipConfig, SipCredentials, PhoneConfig, AppConfig } from './models'\nimport SIPAccount from './lib/SipAccount'\nimport { connect } from 'react-redux'\nimport { setNewAccount } from './actions/sipAccounts'\nimport { setPhoneConfig, setCredentials, setAppConfig } from  './actions/config'\n\n// Wrapper component to do any initialization of the Sip connection.\n\ninterface Props {\n  sipCredentials: SipCredentials\n  sipConfig: SipConfig\n  phoneConfig: PhoneConfig\n  appConfig: AppConfig\n  setNewAccount: Function\n  setPhoneConfig: Function\n  setCredentials: Function\n  setAppConfig: Function\n  children: any\n}\n\nclass SipWrapper extends React.Component<Props> {\n  componentDidMount() {\n    console.log('mounted')\n    if (this.props.sipCredentials.password) {\n      this.initializeSip()\n    }\n  }\n\n  initializeSip() {\n    const account = new SIPAccount(\n      this.props.sipConfig,\n      this.props.sipCredentials\n    )\n    this.props.setNewAccount(account)\n    this.props.setPhoneConfig(this.props.phoneConfig)\n    this.props.setAppConfig(this.props.appConfig)\n  }\n\n  render() {\n    return <React.Fragment>{this.props.children}</React.Fragment>\n  }\n}\nconst mapStateToProps = () => ({})\nconst actions = {\n  setNewAccount,\n  setPhoneConfig,\n  setCredentials,\n  setAppConfig\n}\nexport default connect(mapStateToProps, actions)(SipWrapper)","import { Action } from './models'\nimport {\n  NEW_SESSION,\n  NEW_ATTENDED_TRANSFER,\n  SIPSESSION_ATTENDED_TRANSFER_CANCEL,\n  SIPSESSION_ATTENDED_TRANSFER_FAIL,\n  CLOSE_SESSION,\n  SIPSESSION_STATECHANGE,\n  INCOMING_CALL,\n  ACCEPT_CALL,\n  DECLINE_CALL,\n  SIPSESSION_HOLD_REQUEST,\n  SIPSESSION_UNHOLD_REQUEST\n} from '../actions/sipSessions'\n\nconst sipSessions = (\n  state = {\n    sessions: {},\n    incomingCalls: [],\n    stateChanged: 0,\n    onHold: [],\n    attendedTransfers: []\n  },\n  action: Action\n) => {\n  const { type, payload } = action\n  switch (type) {\n    case INCOMING_CALL:\n      console.log('Incoming call')\n      return {\n        ...state,\n        sessions: { ...state.sessions, [payload.id]: payload },\n        incomingCalls: [...state.incomingCalls, payload.id]\n      }\n    case NEW_SESSION:\n      console.log('New session added')\n      return {\n        ...state,\n        sessions: { ...state.sessions, [payload.id]: payload }\n      }\n    case NEW_ATTENDED_TRANSFER:\n      return {\n        ...state,\n        sessions: { ...state.sessions, [payload.id]: payload },\n        attendedTransfers: [...state.attendedTransfers, payload.id]\n      }\n    case SIPSESSION_ATTENDED_TRANSFER_CANCEL:\n    case SIPSESSION_ATTENDED_TRANSFER_FAIL: {\n      const newAttendedTransfers = [...state.attendedTransfers].filter(\n        (id) => id !== payload.id\n      )\n      return {\n        ...state,\n        attendedTransfers: newAttendedTransfers\n      }\n    }\n    case ACCEPT_CALL: {\n      const acceptedIncoming = [...state.incomingCalls].filter((id) => id !== payload.id)\n      return {\n        ...state,\n        incomingCalls: acceptedIncoming\n      }\n    }\n    case DECLINE_CALL: {\n      const declinedIncoming = [...state.incomingCalls].filter(\n        (id) => id !== payload.id\n      )\n      const declinedSessions: any = { ...state.sessions }\n      delete declinedSessions[payload.id]\n      return {\n        ...state,\n        incomingCalls: declinedIncoming,\n        sessions: declinedSessions\n      }\n    }\n    case SIPSESSION_STATECHANGE: {\n      return {\n        ...state,\n        stateChanged: state.stateChanged + 1\n      }\n    }\n    case CLOSE_SESSION: {\n      const closedIncoming = [...state.incomingCalls].filter(\n        (id) => id !== payload\n      )\n      const newSessions: any = { ...state.sessions }\n      delete newSessions[payload]\n      const endHold = [...state.onHold].filter((id) => id !== payload)\n\n      return {\n        ...state,\n        sessions: newSessions,\n        incomingCalls: closedIncoming,\n        onHold: endHold\n      }\n    }\n    case SIPSESSION_HOLD_REQUEST:{\n      return {\n        ...state,\n        onHold: [...state.onHold, payload]\n      }\n    }\n    case SIPSESSION_UNHOLD_REQUEST: {\n      const newHold = [...state.onHold].filter((id) => id !== payload)\n\n      return {\n        ...state,\n        onHold: newHold\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport default sipSessions\n","import { Action } from './models'\nimport { NEW_USERAGENT, NEW_ACCOUNT } from '../actions/sipAccounts'\n\nconst sipAccounts = (\n  state = {\n    sipAccount: null,\n    userAgent: null,\n    status: ''\n  },\n  action: Action\n) => {\n  const { type, payload } = action\n  switch (type) {\n    case NEW_ACCOUNT:\n      return {\n        ...state,\n        sipAccount: action.payload\n      }\n    case NEW_USERAGENT:\n      return {\n        ...state,\n        userAgent: payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default sipAccounts\n","import { Action } from './models'\nimport {\n  AUDIO_INPUT_DEVICES_DETECTED,\n  AUDIO_OUTPUT_DEVICES_DETECTED,\n  SET_PRIMARY_INPUT,\n  SET_PRIMARY_OUTPUT,\n  AUDIO_SINKID_NOT_ALLOWED\n} from '../actions/device'\n\nconst device = (\n  state = {\n    audioInput: [],\n    audioOutput: [],\n    primaryAudioOutput: 'default',\n    primaryAudioInput: 'default',\n    sinkId: true\n  },\n  action: Action\n) => {\n  const { type, payload } = action\n  switch (type) {\n    case AUDIO_INPUT_DEVICES_DETECTED:\n      return {\n        ...state,\n        audioInput: payload\n      }\n    case AUDIO_OUTPUT_DEVICES_DETECTED:\n      return {\n        ...state,\n        audioOutput: payload\n      }\n    case SET_PRIMARY_OUTPUT:\n      return {\n        ...state,\n        primaryAudioOutput: payload\n      }\n    case SET_PRIMARY_INPUT:\n      return {\n        ...state,\n        primaryAudioInput: payload\n      }\n    case AUDIO_SINKID_NOT_ALLOWED:\n      return {\n        ...state,\n        sinkId: false\n      }\n    default:\n      return state\n  }\n}\n\nexport default device\n","// eslint-disable-next-line no-unused-vars\nimport { Action } from './models'\nimport {\n  SET_CREDENTIALS,\n  SET_PHONE_CONFIG,\n  SET_APP_CONFIG,\n  STRICT_MODE_SHOW_CALL_BUTTON,\n  STRICT_MODE_HIDE_CALL_BUTTON\n} from '../actions/config'\n\nconst config = (\n  state = {\n    uri: '',\n    password: '',\n    phoneConfig: {},\n    appConfig: { mode: '', started: false, appSize: '' }\n  },\n  action: Action\n) => {\n  switch (action.type) {\n    case SET_PHONE_CONFIG:\n      return {\n        ...state,\n        phoneConfig: action.payload\n      }\n    case SET_CREDENTIALS:\n      return {\n        ...state,\n        uri: action.payload.uri,\n        password: action.payload.password,\n      }\n    case SET_APP_CONFIG:\n      return {\n        ...state,\n        appConfig: action.payload\n      }\n    case STRICT_MODE_SHOW_CALL_BUTTON:\n      if (state.appConfig.mode === 'strict') {\n        return {\n          ...state,\n          appConfig:{\n            ...state.appConfig,\n            mode: 'strict',\n            started: true\n          }\n        }\n      }\n      return state\n    case STRICT_MODE_HIDE_CALL_BUTTON:\n      if (state.appConfig.mode === 'strict'){\n        return {\n          ...state,\n          appConfig:{\n            ...state.appConfig,\n            mode: 'strict',\n            started: false\n          }\n        }\n      }\n      return state\n    default:\n      return state\n  }\n}\n\nexport default config\n","import { combineReducers } from 'redux'\nimport sipSessions from './sipSessions'\nimport sipAccounts from './sipAccounts'\nimport device from './device'\nimport config from './config'\n\nconst reducers: any = combineReducers({\n  sipAccounts,\n  sipSessions,\n  device,\n  config\n})\n\nexport default reducers\n","import { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport reducers from '../reducers/index'\n\nconst middleware = [thunk]\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['device']\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const defaultStore = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\nexport const persistor = persistStore(defaultStore)\n","import React, { useContext, useEffect } from 'react'\nimport { Provider, useSelector } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { getInputAudioDevices, getOutputAudioDevices } from './actions/device'\nimport { acceptCall, declineCall, endCall } from './actions/sipSessions'\nimport { AppConfig, PhoneConfig, SipConfig, SipCredentials } from './models'\nimport SipWrapper from './SipWrapper'\nimport { defaultStore, persistor } from './store/configureStore'\n\nexport const phoneStore = defaultStore\ninterface Props {\n  width: number\n  height: number\n  name: string\n  phoneConfig: PhoneConfig\n  sipCredentials: SipCredentials\n  sipConfig: SipConfig\n  appConfig: AppConfig\n  containerStyle: any\n  children: any\n}\n\nconst SIPContext = React.createContext({})\n\nconst SIP = ({ children }: { children: any }) => {\n  const state = useSelector((state: any) => state)\n\n  const makeCall = state?.sipAccounts?.sipAccount?.makeCall\n\n  useEffect(() => {\n    getInputAudioDevices()\n    getOutputAudioDevices()\n  }, [])\n\n  return (\n    <SIPContext.Provider\n      value={{ state, makeCall, acceptCall, declineCall, endCall }}\n    >\n      {children}\n    </SIPContext.Provider>\n  )\n}\n\nexport const SIPProvider = ({\n  name,\n  phoneConfig,\n  sipConfig,\n  appConfig,\n  sipCredentials,\n  containerStyle = {},\n  children\n}: Props) => {\n  console.info(name, containerStyle)\n  return (\n    <Provider store={phoneStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <SipWrapper\n          sipConfig={sipConfig}\n          sipCredentials={sipCredentials}\n          phoneConfig={phoneConfig}\n          appConfig={appConfig}\n        >\n          <SIP>{children}</SIP>\n          <audio id='tone' autoPlay />\n        </SipWrapper>\n      </PersistGate>\n    </Provider>\n  )\n}\n\nexport const useSip = () => {\n  const ctx = useContext(SIPContext)\n  return ctx\n}\n"],"names":["AUDIO_INPUT_DEVICES_DETECTED","AUDIO_OUTPUT_DEVICES_DETECTED","REMOTE_AUDIO_CONNECTED","REMOTE_AUDIO_FAIL","LOCAL_AUDIO_CONNECTED","SET_PRIMARY_OUTPUT","SET_PRIMARY_INPUT","AUDIO_SINKID_NOT_ALLOWED","getInputAudioDevices","inputArray","navigator","mediaDevices","enumerateDevices","then","devices","forEach","device","kind","push","type","payload","getOutputAudioDevices","outputArray","NEW_SESSION","NEW_ATTENDED_TRANSFER","INCOMING_CALL","ACCEPT_CALL","DECLINE_CALL","SIPSESSION_STATECHANGE","CLOSE_SESSION","SIPSESSION_HOLD_REQUEST","SIPSESSION_HOLD_FAIL","SIPSESSION_UNHOLD_REQUEST","SIPSESSION_ATTENDED_TRANSFER_CANCEL","SIPSESSION_ATTENDED_TRANSFER_FAIL","acceptCall","session","declineCall","endCall","sessionId","holdCallRequest","dispatch","sessionDescriptionHandler","state","SessionState","Established","invite","sessionDescriptionHandlerModifiers","holdModifier","id","err","NEW_USERAGENT","NEW_ACCOUNT","setNewAccount","account","SET_CREDENTIALS","SET_PHONE_CONFIG","SET_APP_CONFIG","STRICT_MODE_SHOW_CALL_BUTTON","STRICT_MODE_HIDE_CALL_BUTTON","SESSIONS_LIMIT_REACHED","setCredentials","uri","password","setPhoneConfig","config","setAppConfig","holdAll","phoneStore","getState","onHolds","sipSessions","onHold","sessions","Object","entries","indexOf","setRemoteAudio","console","log","deviceId","primaryAudioOutput","mediaElement","document","getElementById","remoteStream","MediaStream","peerConnection","getReceivers","receiver","track","addTrack","sinkId","srcObject","play","setSinkId","setLocalAudio","primaryAudioInput","getSenders","sender","audioDeviceId","getUserMedia","audio","stream","audioTrack","getAudioTracks","replaceTrack","cleanupMedia","pause","Tone","require","Synth","PolySynth","FMSynth","ToneManager","playRing","stopAll","toneManager","SessionStateHandler","ua","newState","Establishing","myTransport","transport","on","message","includes","cancel","dispose","setTimeout","Terminating","Terminated","getFullNumber","number","length","fullNumber","sipAccounts","sipAccount","_config","defaultCountryCode","IncomingSessionStateHandler","incomingSession","SIPAccount","sipConfig","sipCredentials","_credentials","UserAgent","makeURI","sipuri","Error","transportOptions","server","websocket","userAgentOptions","autoStart","autoStop","noAnswerTimeout","logBuiltinEnabled","process","env","NODE_ENV","logConfiguration","logLevel","authorizationPassword","userAgentString","hackWssInTransport","sessionDescriptionHandlerFactoryOptions","constraints","video","alwaysAcquireMediaFirst","iceCheckingTimeout","registererOptions","expires","_userAgent","_registerer","Registerer","setupDelegate","start","register","setupRegistererListener","delegate","onInvite","invitation","onRefer","referral","stateHandler","stateChange","addListener","RegistererState","Initial","Registered","Unregistered","makeCall","sessionsLimit","phoneConfig","sessionsActiveObject","strictMode","appConfig","mode","attendedTransfersActive","attendedTransfers","sessionsActive","keys","sessionDiff","target","split","inviter","Inviter","outgoingSession","error","listener","SipWrapper","componentDidMount","props","initializeSip","render","React","children","mapStateToProps","actions","connect","action","incomingCalls","stateChanged","newAttendedTransfers","filter","acceptedIncoming","declinedIncoming","declinedSessions","closedIncoming","newSessions","endHold","newHold","userAgent","status","audioInput","audioOutput","started","appSize","reducers","combineReducers","middleware","thunk","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","defaultStore","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","SIPContext","createContext","SIP","useSelector","useEffect","Provider","value","SIPProvider","name","containerStyle","info","store","PersistGate","loading","autoPlay","useSip","ctx","useContext"],"mappings":"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"}